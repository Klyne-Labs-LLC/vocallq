// This is your improved Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttendedTypeEnum {
  REGISTERED
  ATTENDED
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  CONVERTED
}

enum CtaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum WebinarStatusEnum {
  SCHEDULED
  WAITING_ROOM
  LIVE
  ENDED
  CANCELLED
}

enum CallStatusEnum {
  PENDING
  InProgress
  COMPLETED
}

enum TranscriptStatusEnum {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EngagementLevelEnum {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

model User {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String     @db.VarChar(100)
  clerkId          String     @unique
  email            String     @unique
  profileImage     String
  webinars         Webinar[]  @relation("PresenterWebinars")
  stripeConnectId  String?    @db.VarChar(255)
  lastLoginAt      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  subscription     Boolean    @default(false)
  stripeCustomerId String?    @db.VarChar(255)
  aiAgents         AiAgents[]

  @@index([email])
  @@index([clerkId])
}

model Webinar {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  description     String?           @db.Text
  startTime       DateTime
  endTime         DateTime?
  duration        Int               @default(0) // Duration in minutes
  webinarStatus   WebinarStatusEnum @default(SCHEDULED)
  presenterId     String            @db.Uuid
  presenter       User              @relation("PresenterWebinars", fields: [presenterId], references: [id], onDelete: Cascade)
  attendances     Attendance[]
  tags            String[]
  ctaLabel        String?           @db.VarChar(50)
  ctaType         CtaTypeEnum
  ctaUrl          String?           @db.VarChar(255)
  couponCode      String?           @db.VarChar(50)
  couponEnabled   Boolean           @default(false)
  couponExpiry    DateTime?
  lockChat        Boolean           @default(false)
  stripeProductId String?           @db.VarChar(255)
  aiAgentId       String?           @db.Uuid
  aiAgent         AiAgents?         @relation("WebinarAiAgent", fields: [aiAgentId], references: [id])
  priceId         String?           @db.VarChar(255)
  recordingUrl    String?
  thumbnail       String?
  
  // New AssemblyAI related fields
  liveTranscriptionEnabled Boolean             @default(false)
  autoTranscriptEnabled    Boolean             @default(true)
  transcriptLanguage       String              @default("en")
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  Attendee        Attendee?         @relation(fields: [attendeeId], references: [id])
  attendeeId      String?           @db.Uuid
  
  // New relations
  transcripts              WebinarTranscript[] @relation("WebinarTranscripts")
  liveTranscriptions       LiveTranscription[] @relation("LiveTranscriptions")
  insights                 WebinarInsights?    @relation("WebinarInsights")

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
}

model Attendee {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String         @unique
  name       String         @db.VarChar(100)
  callStatus CallStatusEnum @default(PENDING)
  Attendance Attendance[]
  Webinar    Webinar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId    String           @db.Uuid
  joinedAt     DateTime         @default(now())
  leftAt       DateTime?
  user         Attendee         @relation(fields: [attendeeId], references: [id])
  webinar      Webinar          @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  attendedType AttendedTypeEnum
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  attendeeId   String           @db.Uuid
  userId       String?          @db.Uuid

  @@unique([attendeeId, webinarId]) // âœ… This enforces 1 attendee per webinar
  @@index([webinarId])
  @@index([attendedType])
}

model AiAgents {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(100)
  firstMessage String    @db.Text
  prompt       String    @db.Text
  model        String    @db.VarChar(50)
  provider     String    @db.VarChar(50)
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  webinars     Webinar[] @relation("WebinarAiAgent")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
}

model WebinarTranscript {
  id              String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId       String              @db.Uuid
  webinar         Webinar             @relation("WebinarTranscripts", fields: [webinarId], references: [id], onDelete: Cascade)
  
  // AssemblyAI specific fields
  assemblyAiId    String?             @unique @db.VarChar(255) // Store AssemblyAI transcript ID
  transcriptText  String?             @db.Text
  status          TranscriptStatusEnum @default(PENDING)
  
  // Correct field types based on AssemblyAI response structure
  confidence      Float?              @db.DoublePrecision // Changed from generic Float
  audioDuration   Int?                // Duration in seconds (AssemblyAI provides this)
  processingTime  Int?                // Processing time in seconds
  
  // Updated based on actual AssemblyAI response structure
  autoHighlights  Json?               // Store auto_highlights_result
  sentimentResults Json?              // Store sentiment_analysis_results
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  segments        TranscriptSegment[]

  @@index([webinarId])
  @@index([status])
  @@index([assemblyAiId]) // New index for AssemblyAI ID
}

model TranscriptSegment {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transcriptId     String            @db.Uuid
  transcript       WebinarTranscript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  text             String            @db.Text
  startTime        Float             // Timestamp in seconds (changed to Float for precision)
  endTime          Float             // Timestamp in seconds
  confidence       Float             @db.DoublePrecision // 0 to 1 scale
  speaker          String?           @db.VarChar(100)
  sentiment        Float?            @db.DoublePrecision // -1 to 1 scale for this segment
  engagementLevel  EngagementLevelEnum?
  createdAt        DateTime          @default(now())

  @@index([transcriptId])
  @@index([startTime])
}

model LiveTranscription {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId        String    @db.Uuid
  webinar          Webinar   @relation("LiveTranscriptions", fields: [webinarId], references: [id], onDelete: Cascade)
  
  // Universal-Streaming specific fields
  turnOrder        Int       // turn_order from Universal-Streaming
  turnId           String?   @db.VarChar(255) // Unique turn identifier
  text             String    @db.Text
  isFormatted      Boolean   @default(false) // turn_is_formatted
  endOfTurn        Boolean   @default(false) // end_of_turn
  endOfTurnConfidence Float? @db.DoublePrecision // end_of_turn_confidence
  
  timestamp        Float     // Timestamp in seconds from webinar start
  confidence       Float?    @db.DoublePrecision
  speaker          String?   @db.VarChar(100)
  createdAt        DateTime  @default(now())

  @@index([webinarId, turnOrder])
  @@index([webinarId, timestamp])
}

model WebinarInsights {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId             String   @unique @db.Uuid
  webinar               Webinar  @relation("WebinarInsights", fields: [webinarId], references: [id], onDelete: Cascade)
  overallSentiment      Float?   @db.DoublePrecision // -1 to 1 scale
  engagementScore       Float?   @db.DoublePrecision // 0 to 1 scale
  keyMoments            Json[]   // Array of {timestamp, description, type}
  questionCount         Int      @default(0)
  averageConfidence     Float?   @db.DoublePrecision // 0 to 1 scale
  topKeywords           String[] // Most mentioned keywords
  audienceParticipation Float?   @db.DoublePrecision // Percentage of time audience was speaking
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
